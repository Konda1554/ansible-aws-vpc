---
- name: local project stack
  hosts: localhost
  connection: local
  gather_facts: NO
  tasks:
    - name: Import Vpc Variables
      include_vars: vars/vpc-output_vars

    - name: Import project set up variables
      include_vars: vars/projectstacksetup

    - name: Create Key pair
      ec2_key:
        name: project key
        region: "{{region}}"
      register: key_out
    - name: save the key as a file key.pem
      copy:
        content: "{{key_out.key.private_key}}"
        dest: "./key.pem"
        mode: 8608
      when: key_out.changed
  #  - debug:
  #      var : key_out
    - name: Create sg for ELB
      ec2_group:
        name: projectELB_SG
        description: Allow  port 80 from  everywhere and all port within sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_block: 0.0.0.0/0
      register: Elbsg_out
    - name: Create sg for project stack
      ec2_group:
        name: Stack-sg
        description: allow port 22 from any where and all port with in sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{Elbsg_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{Bastiosgid}}"
      register: projectstack_out

    - name: Update sg for its own sg id
      ec2_group:
        name: Stack-sg
        description: allow port 22 from any where and all port with in sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{projectstack_out.group_id}}"



    - name: Create nginx server
      ec2:
        key_name: project key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "webapp01"
          Project: Projectstack
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "webapp01"
          Project: Projectstack
          Owner: DevOps Team
        group_id: "{{projectstack_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: webapp01_out





    - name: Create tomcat server
      ec2:
        key_name: project key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "app01"
          Project: Projectstack
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "app01"
          Project: Projectstack
          Owner: DevOps Team
        group_id: "{{projectstack_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out



    - name: Create memcache server
      ec2:
        key_name: project key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{memcached_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mem01"
          Project: Projectstack
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "mem01"
          Project: Projectstack
          Owner: DevOps Team
        group_id: "{{projectstack_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mem01_out


    - name: Create rmq  server app
      ec2:
        key_name: project key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rmq01"
          Project: Projectstack
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "rmq01"
          Project: Projectstack
          Owner: DevOps Team
        group_id: "{{projectstack_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out


    - name: Create mysql server
      ec2:
        key_name: project key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mysql01"
          Project: Projectstack
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "mysql01"
          Project: Projectstack
          Owner: DevOps Team
        group_id: "{{projectstack_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mysql01_out
    - debug:
        var: mysql01_out.tagged_instances[0].id

    - local_action:
        module: ec2_elb_lb
        name: "project-elb"
        state: present
        region: "{{region}}"
        instance_ids:
          - "{{webapp01_out.tagged_instances[0].id}}"
        purge_instance_ids: true
        security_group_ids: "{{Elbsg_out.group_id}}"
        subnets:
          - "{{pubsub1id}}"
          -  "{{pubsub2id}}"
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80


    - name: Insert/Update Host IPs & Name in file provision-stack/group_vars/hostip
      blockinfile:
        path: provision-stack/group_vars/hostip
        block: |
          webapp01_ip: {{webapp01_out.tagged_instances[0].private_ip}}
          app01_ip: {{app01_out.tagged_instances[0].private_ip}}
          rmq01_ip: {{rmq01_out.tagged_instances[0].private_ip}}
          memcache01_ip: {{mem01_out.tagged_instances[0].private_ip}}
          mysql01_ip: {{mysql01_out.tagged_instances[0].private_ip}}

    - name: copy login key to provision-stack directory
      copy:
        src: key.pem
        dest: provision-stack/key.pem
        mode: '0400'

    - name: Insert/Update Host IPs & Name in file provision-stack/inventory-project
      blockinfile:
        path: provision-stack/inventory-project
        block: |
          webapp01 ansible_host={{webapp01_out.tagged_instances[0].private_ip}}
          app01 ansible_host={{app01_out.tagged_instances[0].private_ip}}
          rmq01 ansible_host={{rmq01_out.tagged_instances[0].private_ip}}
          memcache01 ansible_host={{mem01_out.tagged_instances[0].private_ip}}
          mysql01 ansible_host={{mysql01_out.tagged_instances[0].private_ip}}
          cntl ansible_host= 127.0.0.1 ansible_connection=local
          
          
          [webservgrp]
          webapp01
          [appservgrp]
          app01
          [rmqservgrp]
          rmq01
          [memservgrp]
          mem01
          [mysqlservgrp]
          mysql01
          [control]
          cntl
          
          
          [stack_inst:children]
          webservgrp
          appservgrp
          rmqservgrp
          memservgrp
          mysqlservgrp
          
          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=key.pem
          #ansible_python_interpreter=/usr/bin/python3
          































